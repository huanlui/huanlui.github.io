{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","App","useState","jsonFile","pad_array","arr","len","fill","length","pad","Array","getModel","a","async","uploadJSONInput","document","getElementById","uploadWeightsInput","tf","browserFiles","files","loadedModel","useEffect","className","Button","variant","component","color","type","style","display","id","accept","onClick","pachebelNumbers","map","chord","ToNumber","paddedPachebel","console","log","tensor","expandDims","prediction","predict","values","dataSync","from","Math","max","shift","chordProbabilities","value","index","ToChord","probability","sort","left","right","slice","loadModel","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ivqBAAAA,EAAOC,QAAU,IAA0B,kC,iTCSzBC,aAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWN,EAAMG,QAAQ,QAkGdI,MA7Ff,WAAgB,IAAD,EACaC,qBADb,gCAEmBA,sBAFnB,mBAENC,EAFM,KAIPC,GAJO,KAIK,SAACC,EAAIC,EAAIC,GACzB,GAAGF,EAAIG,QAAUF,EAAK,OAAOD,EAE7B,IAAMI,EAAM,IAAIC,MAAMJ,EAAMD,EAAIG,QAGhC,OAFAC,EAAIF,KAAK,GAEH,GAAN,OAAWE,EAAX,YAAkBJ,MAGdM,EAAW,8BAAAC,EAAAC,OAAA,uDACTC,EAAkBC,SAASC,eAAe,eAC1CC,EAAqBF,SAASC,eAAe,kBAFpC,WAAAJ,EAAA,MAGWM,IAAmBA,IAAMC,aACnD,CAACL,EAAgBM,MAAM,GAAIH,EAAmBG,MAAM,OAJrC,cAGTC,EAHS,yBAKRA,GALQ,sCA4CjB,OANAC,qBAAW,cAER,IAKD,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACfpB,EACH,kBAACqB,EAAA,EAAD,CACEC,QAAQ,YACRC,UAAU,QACVC,MAAM,WAHR,oBAME,2BACEC,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,GAAG,cACHC,OAAO,WAGT,kBAACR,EAAA,EAAD,CACAC,QAAQ,YACRC,UAAU,QACVC,MAAM,WAHN,oBAMA,2BACEC,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,GAAG,iBACHC,OAAO,UAGT,kBAACR,EAAA,EAAD,CAAQS,QAlEF,YACS,iCAAArB,EAAAC,OAAA,kEAAAD,EAAA,MACSD,KADT,OACXU,EADW,OAIXa,EADW,CAAC,IAAK,IAAM,KAAO,MAAQ,IAAM,IAAM,IAAM,KAC7BC,KAAI,SAAAC,GAAK,OAAIC,EAASD,MACjDE,EAAiBlC,EAAU8B,EAAgB,IAEjDK,QAAQC,IAAIF,GACRG,EAASvB,IAAYoB,EAAgB,SAASI,WAAW,GACvDC,EAAatB,EAAYuB,QAAQH,GACjCI,EAASF,EAAWG,WACpBzC,EAAMK,MAAMqC,KAAKF,GACvBN,QAAQC,IAAInC,EAAI,IAChBkC,QAAQC,IAAIQ,KAAKC,IAAL,MAAAD,KAAI,YAAQ3C,KAExBA,EAAI6C,QAOJC,GAFAA,GAHIA,EAAqB9C,EAAI8B,KAAI,SAACiB,EAAMC,GAAP,MAAkB,CAACjB,MAAMkB,EAAQD,EAAM,GAAIE,YAAYH,OAGhDI,MAAM,SAACC,EAAMC,GAAP,OAAiBA,EAAMH,YAAcE,EAAKF,gBAEhDI,MAAM,EAAE,IAChDpB,QAAQC,IAAIW,GAvBK,sCA0BnBS,KAuCI,WC/FYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASC,eAAe,SD6H3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f17c53a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToNumber from './category_to_number.json'\nimport ToChord from './number_to_category.json'\nimport * as tf from '@tensorflow/tfjs';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n\nfunction App() {\n  const [model, setModel] = useState();\n  const [jsonFile, setJsonFile] = useState();\n\n  const pad_array = (arr,len,fill) => {\n    if(arr.length >= len) return arr;\n\n    const pad = new Array(len - arr.length);\n    pad.fill(0)\n\n    return [...pad,...arr];\n  }\n\n  const getModel = async () => {\n    const uploadJSONInput = document.getElementById('upload-json');\n    const uploadWeightsInput = document.getElementById('upload-weights');\n    const loadedModel = await tf.loadLayersModel(tf.io.browserFiles(\n    [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n    return loadedModel;\n  }\n\n  const run = () => {\n    const  loadModel = async () => {\n      const loadedModel = await getModel();\n\n      const pachebel = ['D' ,'A' , 'Bm' , 'F#m' , 'G' , 'D'  ,'G',  'A'];\n      const pachebelNumbers = pachebel.map(chord => ToNumber[chord])\n      const paddedPachebel = pad_array(pachebelNumbers,20,0)\n\n      console.log(paddedPachebel)\n      let tensor = tf.tensor1d(paddedPachebel, 'int32').expandDims(0);\n      const prediction = loadedModel.predict(tensor)\n      const values = prediction.dataSync();\n      const arr = Array.from(values);\n      console.log(arr[0])\n      console.log(Math.max(...arr))\n\n      arr.shift() //Remove probabiliy for null chord\n\n      let chordProbabilities = arr.map((value,index) => ({chord:ToChord[index+1], probability:value }));\n\n      \n      chordProbabilities = chordProbabilities.sort( (left, right) => right.probability - left.probability);\n\n      chordProbabilities = chordProbabilities.slice(0,10);\n      console.log(chordProbabilities);\n      \n    }\n    loadModel()\n  }\n  \n  useEffect( () => {\n\n  }, [])\n \n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {jsonFile}\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n      >\n        Select model file\n        <input\n          type=\"file\"\n          style={{ display: \"none\" }}\n          id=\"upload-json\"\n          accept=\".json\"\n        />\n        </Button>\n        <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n      >\n        Select width file\n        <input\n          type=\"file\"\n          style={{ display: \"none\" }}\n          id=\"upload-weights\"\n          accept=\".bin\"\n        />\n        </Button>\n        <Button onClick={run}>Load</Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}